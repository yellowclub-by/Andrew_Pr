from aiogram.filters import CommandStart, Command
from aiogram import types, Router, F
from keyboards import reply, inline

user_router = Router()


@user_router.message(CommandStart())
async def start(message: types.Message):
    text = '''<strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã</strong>üòÅ!\n 
–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –±–∞–∑–æ–≤—ã–µ –≤–µ—â–∏ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å. 
–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –∫–æ–º—Ñ–æ—Ä—Ç –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–ºüí∏.\n
–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ –º–æ–¥—ã –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏üëê!'''
    await message.answer(text, reply_markup=reply.start_kb)


@user_router.message(F.text.lower() == "–∫–∞—Ç–∞–ª–æ–≥")
@user_router.message(Command('catalog'))
async def catalog(message: types.Message):
    await message.answer('–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥üìÉ', reply_markup=reply.catalog_kb)


@user_router.message(F.text.lower() == '–ø—Ä–æ –Ω–∞—Å')
@user_router.message(Command('about'))
async def about(message: types.Message):
    await message.answer('–ü—Ä–æ –Ω–∞—Å ')


@user_router.message(F.text.lower() == '–∫–æ–Ω—Ç–∞–∫—Ç—ã')
@user_router.message(Command('contacts'))
async def contacts(message: types.Message):
    await message.answer('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ')


@user_router.message(F.text.lower() == '—Ñ–∏–ª–∏–∞–ª—ã')
@user_router.message(Command('addresses'))
async def addresses(message: types.Message):
    await message.answer('–ù–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã ', reply_markup=inline.adresses_kb())
@user_router.callback_query(F.data.lower().startswith('adresses'))
async def adresses_types(callback: types.CallbackQuery):
    query = callback.data.split('_')[1]
    if query == '1':
        await callback.message.answer('–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ 1')
    elif query == '2':
        await callback.message.answer('–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ 2')
    elif query == '3' :
        await callback.message.answer('–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ 3')
    await callback.answer()





@user_router.message(F.text.lower() == '–Ω–∞–∑–∞–¥')
async def back_menu(message: types.Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=reply.start_kb)

# @user_router.message(F.text)
# @user_router.message(F.photo)
# @user_router.message(F.text.lower() == "–¥–æ—Å—Ç–∞–≤–∫–∞")
# @user_router.message(F.text.lower().contains('–¥–æ—Å—Ç–∞–≤–∫'))
# @user_router.message(F.text.lower().startswith('–∫–∞–∫'))
# @user_router.message(F.text.lower().endswith('?'))
# @user_router.message(F.text.lower().startswith('–∫–∞–∫'), F.text.lower().endswith('?'))
# @user_router.message( (F.text.lower().contains('—Ü–µ–Ω')) | (F.text.lower().contains('—Å—Ç–æ–∏–º–æ—Å—Ç')) )
# async def echo(message: types.Message):
#    await message.answer('–°—Ä–∞–±–æ—Ç–∞–ª –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä ')

